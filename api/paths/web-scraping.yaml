paths:
  /scrape:
    get:
      summary: Structured Web Scrape
      description: |
        We search the public web for the most relevant sources to your query, extract structured data, and return curated series.

        How it works:
        - We always extract tabular/JSON-like data when available.
        - If `paragraph_extraction` is true, we scan prose paragraphs to identify statistics and convert them into series (e.g., "In 2000, there were 5,000 Swedes in Norway; in 2020, 50,000" â†’ year/value pairs).
        - If `plot2table` > 0, we analyze images of plots and extract their underlying datapoints.

        Credits:
        - 1 Scrape credit per request.
        - Paragraph extraction surcharge = +1 credit when `paragraph_extraction` is true.
        - Plot2Table credits = 1 per chart processed when `plot2table` > 0.
      tags:
        - Web Scraping
      security:
        - ApiKeyAuth: []
      parameters:
        - in: query
          name: url
          required: true
          description: URL to scrape
          schema:
            type: string
            format: uri
        - in: query
          name: query
          description: Optional hint to guide extraction focus for this URL
          schema:
            type: string
        - in: query
          name: paragraph_extraction
          description: Extract statistics from paragraphs and convert to structured series
          schema:
            type: boolean
            default: false
        - in: query
          name: plot2table
          description: Number of plot images to analyze and convert into raw datapoints
          schema:
            type: integer
            minimum: 0
            default: 0
      x-codeSamples:
        - lang: cURL
          source: # INJECT: curl/scrape_example.sh
        - lang: Python
          source: # INJECT: python/scrape_example.py
        - lang: JavaScript
          source: # INJECT: js/scrape_example.js
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '../schemas/schemas.yaml#/components/schemas/ScrapeResponse'
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: Maximum requests allowed per time window
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: Number of requests remaining in current window
            X-RateLimit-Reset:
              schema:
                type: integer
              description: Unix timestamp when the rate limit resets
            X-RateLimit-Window:
              schema:
                type: integer
              description: Time window in seconds
            X-Concurrent-Limit:
              schema:
                type: integer
              description: Maximum concurrent requests allowed
            X-Concurrent-Current:
              schema:
                type: integer
              description: Current number of concurrent requests
        '400':
          description: Invalid URL or scraping failed
          content:
            application/json:
              schema:
                $ref: '../schemas/schemas.yaml#/components/schemas/ErrorResponse'
        '401':
          $ref: '../responses/responses.yaml#/components/responses/UnauthorizedError'
        '429':
          $ref: '../responses/responses.yaml#/components/responses/RateLimitError'

