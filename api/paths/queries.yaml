paths:
  /query/nl:
    get:
      summary: Natural Language Query
      description: |
        We search the public web for the most relevant sources to your query, extract structured data, and return curated series.

        How it works:
        - We query the web and fetch the top `num_results` relevant pages.
        - We always extract tabular/JSON-like data when available.
        - If `paragraph_extraction` is true, we scan prose paragraphs to identify statistics and convert them into series (e.g., "In 2000, there were 5,000 Swedes in Norway; in 2020, 50,000" â†’ year/value pairs).
        - If `plot2table` > 0, we analyze images of plots and extract their underlying datapoints.

        Credits:
        - Base credits = ceil(num_results / 10), minimum 1.
        - Paragraph extraction surcharge = +1 credit when `paragraph_extraction` is true.
        - Plot2Table credits = 1 per chart processed when `plot2table` > 0.
      tags:
        - Queries
      security:
        - ApiKeyAuth: []
      parameters:
        - in: query
          name: query
          required: true
          description: Natural language query
          schema:
            type: string
        - in: query
          name: num_results
          description: Number of top relevant pages to fetch and process
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - in: query
          name: paragraph_extraction
          description: Extract statistics from paragraph text and convert to structured series (year/value pairs)
          schema:
            type: boolean
            default: false
        - in: query
          name: plot2table
          description: Number of plot images to analyze and convert into raw datapoints
          schema:
            type: integer
            minimum: 0
            default: 0
      x-codeSamples:
        - lang: cURL
          source: # INJECT: curl/nl_query_example.sh
        - lang: Python
          source: # INJECT: python/nl_query_example.py
        - lang: JavaScript
          source: # INJECT: js/nl_query_example.js
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '../schemas/schemas.yaml#/components/schemas/QueryResponse'
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: Maximum requests allowed per time window
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: Number of requests remaining in current window
            X-RateLimit-Reset:
              schema:
                type: integer
              description: Unix timestamp when the rate limit resets
            X-RateLimit-Window:
              schema:
                type: integer
              description: Time window in seconds
            X-Concurrent-Limit:
              schema:
                type: integer
              description: Maximum concurrent requests allowed
            X-Concurrent-Current:
              schema:
                type: integer
              description: Current number of concurrent requests
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '../schemas/schemas.yaml#/components/schemas/ErrorResponse'
        '401':
          $ref: '../responses/responses.yaml#/components/responses/UnauthorizedError'
        '429':
          $ref: '../responses/responses.yaml#/components/responses/RateLimitError'


