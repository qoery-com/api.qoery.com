# coding: utf-8

"""
    qoery's API

    Every number on the internet, queryable. Instant access to millions of trusted statistics through a single natural language query or API call. 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class UsageStats(BaseModel):
    """
    UsageStats
    """ # noqa: E501
    queries_used: StrictInt = Field(description="Number of queries used in current period")
    queries_limit: StrictInt = Field(description="Maximum queries allowed in current period")
    period_start: datetime
    period_end: datetime
    concurrent_requests: StrictInt = Field(description="Current number of concurrent requests")
    max_concurrent: StrictInt = Field(description="Maximum concurrent requests allowed")
    __properties: ClassVar[List[str]] = ["queries_used", "queries_limit", "period_start", "period_end", "concurrent_requests", "max_concurrent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsageStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsageStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "queries_used": obj.get("queries_used"),
            "queries_limit": obj.get("queries_limit"),
            "period_start": obj.get("period_start"),
            "period_end": obj.get("period_end"),
            "concurrent_requests": obj.get("concurrent_requests"),
            "max_concurrent": obj.get("max_concurrent")
        })
        return _obj


