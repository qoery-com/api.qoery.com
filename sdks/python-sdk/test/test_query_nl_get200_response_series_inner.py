# coding: utf-8

"""
    qoery's API

    Every number on the internet, queryable. Instant access to millions of trusted statistics through a single natural language query or API call.  # Installation  ### Python SDK  Install from PyPI:  ```bash pip install qoery ```  PyPI: [qoery](https://pypi.org/project/qoery/)  ### JavaScript SDK  Install from npm:  ```bash npm install qoery ```  npm: [qoery](https://www.npmjs.com/package/qoery) 

    The version of the OpenAPI document: 0.2.0
    Contact: samuel.tinnerholm@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from qoery.models.query_nl_get200_response_series_inner import QueryNlGet200ResponseSeriesInner

class TestQueryNlGet200ResponseSeriesInner(unittest.TestCase):
    """QueryNlGet200ResponseSeriesInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> QueryNlGet200ResponseSeriesInner:
        """Test QueryNlGet200ResponseSeriesInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `QueryNlGet200ResponseSeriesInner`
        """
        model = QueryNlGet200ResponseSeriesInner()
        if include_optional:
            return QueryNlGet200ResponseSeriesInner(
                id = '',
                name = '',
                entity = qoery.models._query_nl_get_200_response_series_inner_entity._query_nl_get_200_response_series_inner_entity(
                    id = '', 
                    name = '', ),
                metric = qoery.models._query_nl_get_200_response_series_inner_metric._query_nl_get_200_response_series_inner_metric(
                    id = '', 
                    name = '', ),
                unit = qoery.models._query_nl_get_200_response_series_inner_unit._query_nl_get_200_response_series_inner_unit(
                    id = '', 
                    name = '', 
                    symbol = '', ),
                source = qoery.models._query_nl_get_200_response_series_inner_source._query_nl_get_200_response_series_inner_source(
                    id = 56, 
                    url = '', 
                    description = '', ),
                frequency = '',
                description = '',
                labels = { },
                observations = [
                    qoery.models._query_nl_get_200_response_series_inner_observations_inner._query_nl_get_200_response_series_inner_observations_inner(
                        timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        value = null, )
                    ]
            )
        else:
            return QueryNlGet200ResponseSeriesInner(
                entity = qoery.models._query_nl_get_200_response_series_inner_entity._query_nl_get_200_response_series_inner_entity(
                    id = '', 
                    name = '', ),
                metric = qoery.models._query_nl_get_200_response_series_inner_metric._query_nl_get_200_response_series_inner_metric(
                    id = '', 
                    name = '', ),
                source = qoery.models._query_nl_get_200_response_series_inner_source._query_nl_get_200_response_series_inner_source(
                    id = 56, 
                    url = '', 
                    description = '', ),
                observations = [
                    qoery.models._query_nl_get_200_response_series_inner_observations_inner._query_nl_get_200_response_series_inner_observations_inner(
                        timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        value = null, )
                    ],
        )
        """

    def testQueryNlGet200ResponseSeriesInner(self):
        """Test QueryNlGet200ResponseSeriesInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
