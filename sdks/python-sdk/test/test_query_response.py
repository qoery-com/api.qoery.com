# coding: utf-8

"""
    qoery's API

    Every number on the internet, queryable. Instant access to millions of trusted statistics through a single natural language query or API call.  # Installation  ### Python SDK  Install from PyPI:  ```bash pip install qoery ```  PyPI: [qoery](https://pypi.org/project/qoery/)  ### JavaScript SDK  Install from npm:  ```bash npm install qoery ```  npm: [qoery](https://www.npmjs.com/package/qoery) 

    The version of the OpenAPI document: 0.2.0
    Contact: samuel.tinnerholm@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from qoery.models.query_response import QueryResponse

class TestQueryResponse(unittest.TestCase):
    """QueryResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> QueryResponse:
        """Test QueryResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `QueryResponse`
        """
        model = QueryResponse()
        if include_optional:
            return QueryResponse(
                sql_query = '',
                series = [
                    qoery.models._query_nl_post_200_response_series_inner._query_nl_post_200_response_series_inner(
                        id = '', 
                        name = '', 
                        entity = qoery.models._query_nl_post_200_response_series_inner_entity._query_nl_post_200_response_series_inner_entity(
                            id = '', 
                            name = '', ), 
                        metric = qoery.models._query_nl_post_200_response_series_inner_metric._query_nl_post_200_response_series_inner_metric(
                            id = '', 
                            name = '', ), 
                        unit = qoery.models._query_nl_post_200_response_series_inner_unit._query_nl_post_200_response_series_inner_unit(
                            id = '', 
                            name = '', 
                            symbol = '', ), 
                        source = qoery.models._query_nl_post_200_response_series_inner_source._query_nl_post_200_response_series_inner_source(
                            id = 56, 
                            url = '', 
                            description = '', ), 
                        frequency = '', 
                        description = '', 
                        labels = { }, 
                        observations = [
                            qoery.models._query_nl_post_200_response_series_inner_observations_inner._query_nl_post_200_response_series_inner_observations_inner(
                                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                value = null, )
                            ], )
                    ],
                meta = qoery.models._query_nl_post_200_response_meta._query_nl_post_200_response_meta(
                    result_count = 56, 
                    page = qoery.models._query_nl_post_200_response_meta_page._query_nl_post_200_response_meta_page(
                        limit = 56, 
                        offset = 56, 
                        next_cursor = '', 
                        has_more = True, ), 
                    diagnostics = { }, ),
                description = ''
            )
        else:
            return QueryResponse(
                sql_query = '',
                series = [
                    qoery.models._query_nl_post_200_response_series_inner._query_nl_post_200_response_series_inner(
                        id = '', 
                        name = '', 
                        entity = qoery.models._query_nl_post_200_response_series_inner_entity._query_nl_post_200_response_series_inner_entity(
                            id = '', 
                            name = '', ), 
                        metric = qoery.models._query_nl_post_200_response_series_inner_metric._query_nl_post_200_response_series_inner_metric(
                            id = '', 
                            name = '', ), 
                        unit = qoery.models._query_nl_post_200_response_series_inner_unit._query_nl_post_200_response_series_inner_unit(
                            id = '', 
                            name = '', 
                            symbol = '', ), 
                        source = qoery.models._query_nl_post_200_response_series_inner_source._query_nl_post_200_response_series_inner_source(
                            id = 56, 
                            url = '', 
                            description = '', ), 
                        frequency = '', 
                        description = '', 
                        labels = { }, 
                        observations = [
                            qoery.models._query_nl_post_200_response_series_inner_observations_inner._query_nl_post_200_response_series_inner_observations_inner(
                                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                value = null, )
                            ], )
                    ],
                meta = qoery.models._query_nl_post_200_response_meta._query_nl_post_200_response_meta(
                    result_count = 56, 
                    page = qoery.models._query_nl_post_200_response_meta_page._query_nl_post_200_response_meta_page(
                        limit = 56, 
                        offset = 56, 
                        next_cursor = '', 
                        has_more = True, ), 
                    diagnostics = { }, ),
        )
        """

    def testQueryResponse(self):
        """Test QueryResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
