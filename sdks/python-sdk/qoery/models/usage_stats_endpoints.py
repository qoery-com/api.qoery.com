# coding: utf-8

"""
    qoery's API

    Every number on the internet, queryable. Instant access to millions of trusted statistics through a single natural language query or API call.  # Installation  ### Python SDK  Install from PyPI:  ```bash pip install qoery ```  PyPI: [qoery](https://pypi.org/project/qoery/)  ### JavaScript SDK  Install from npm:  ```bash npm install qoery ```  npm: [qoery](https://www.npmjs.com/package/qoery) 

    The version of the OpenAPI document: 0.3.0
    Contact: samuel.tinnerholm@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from qoery.models.usage_stats_endpoints_nl import UsageStatsEndpointsNl
from typing import Optional, Set
from typing_extensions import Self

class UsageStatsEndpoints(BaseModel):
    """
    Usage statistics broken down by endpoint
    """ # noqa: E501
    nl: UsageStatsEndpointsNl
    scrape: UsageStatsEndpointsNl
    plot2table: UsageStatsEndpointsNl
    __properties: ClassVar[List[str]] = ["nl", "scrape", "plot2table"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsageStatsEndpoints from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of nl
        if self.nl:
            _dict['nl'] = self.nl.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scrape
        if self.scrape:
            _dict['scrape'] = self.scrape.to_dict()
        # override the default output from pydantic by calling `to_dict()` of plot2table
        if self.plot2table:
            _dict['plot2table'] = self.plot2table.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsageStatsEndpoints from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nl": UsageStatsEndpointsNl.from_dict(obj["nl"]) if obj.get("nl") is not None else None,
            "scrape": UsageStatsEndpointsNl.from_dict(obj["scrape"]) if obj.get("scrape") is not None else None,
            "plot2table": UsageStatsEndpointsNl.from_dict(obj["plot2table"]) if obj.get("plot2table") is not None else None
        })
        return _obj


