# coding: utf-8

"""
    qoery's API

    Every number on the internet, queryable. Instant access to millions of trusted statistics through a single natural language query or API call.  # Installation  ### Python SDK  Install from PyPI:  ```bash pip install qoery ```  PyPI: [qoery](https://pypi.org/project/qoery/)  ### JavaScript SDK  Install from npm:  ```bash npm install qoery ```  npm: [qoery](https://www.npmjs.com/package/qoery) 

    The version of the OpenAPI document: 0.4.0
    Contact: samuel.tinnerholm@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr
from typing import Optional
from typing_extensions import Annotated
from qoery.models.query_nl_get200_response import QueryNlGet200Response
from qoery.models.scrape_get200_response import ScrapeGet200Response

from qoery.api_client import ApiClient, RequestSerialized
from qoery.api_response import ApiResponse
from qoery.rest import RESTResponseType


class WebScrapingApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def plot2table_get(
        self,
        image_url: Annotated[StrictStr, Field(description="URL of the image containing charts or graphs to convert to data table")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> QueryNlGet200Response:
        """Convert Charts to Data Tables

        Provide an image URL of a plot or chart and receive the underlying datapoints as structured series. Supports time series, categorical, and scatter charts.  Credits: 1 Plot2Table credit per image processed. 

        :param image_url: URL of the image containing charts or graphs to convert to data table (required)
        :type image_url: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._plot2table_get_serialize(
            image_url=image_url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryNlGet200Response",
            '400': "QueryNlGet400Response",
            '401': "QueryNlGet400Response",
            '429': "QueryNlGet400Response",
            '500': "QueryNlGet400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def plot2table_get_with_http_info(
        self,
        image_url: Annotated[StrictStr, Field(description="URL of the image containing charts or graphs to convert to data table")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[QueryNlGet200Response]:
        """Convert Charts to Data Tables

        Provide an image URL of a plot or chart and receive the underlying datapoints as structured series. Supports time series, categorical, and scatter charts.  Credits: 1 Plot2Table credit per image processed. 

        :param image_url: URL of the image containing charts or graphs to convert to data table (required)
        :type image_url: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._plot2table_get_serialize(
            image_url=image_url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryNlGet200Response",
            '400': "QueryNlGet400Response",
            '401': "QueryNlGet400Response",
            '429': "QueryNlGet400Response",
            '500': "QueryNlGet400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def plot2table_get_without_preload_content(
        self,
        image_url: Annotated[StrictStr, Field(description="URL of the image containing charts or graphs to convert to data table")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Convert Charts to Data Tables

        Provide an image URL of a plot or chart and receive the underlying datapoints as structured series. Supports time series, categorical, and scatter charts.  Credits: 1 Plot2Table credit per image processed. 

        :param image_url: URL of the image containing charts or graphs to convert to data table (required)
        :type image_url: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._plot2table_get_serialize(
            image_url=image_url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryNlGet200Response",
            '400': "QueryNlGet400Response",
            '401': "QueryNlGet400Response",
            '429': "QueryNlGet400Response",
            '500': "QueryNlGet400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _plot2table_get_serialize(
        self,
        image_url,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if image_url is not None:
            
            _query_params.append(('image_url', image_url))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/plot2table',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def scrape_get(
        self,
        url: Annotated[StrictStr, Field(description="URL to scrape")],
        query: Annotated[Optional[StrictStr], Field(description="Optional hint to guide extraction focus for this URL")] = None,
        paragraph_extraction: Annotated[Optional[StrictBool], Field(description="Extract statistics from paragraphs and convert to structured series")] = None,
        plot2table: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of plot images to analyze and convert into raw datapoints")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ScrapeGet200Response:
        """Structured Web Scrape

        We search the public web for the most relevant sources to your query, extract structured data, and return curated series.  How it works: - We always extract tabular/JSON-like data when available. - If `paragraph_extraction` is true, we scan prose paragraphs to identify statistics and convert them into series (e.g., \"In 2000, there were 5,000 Swedes in Norway; in 2020, 50,000\" → year/value pairs). - If `plot2table` > 0, we analyze images of plots and extract their underlying datapoints.  Credits: - 1 Scrape credit per request. - Paragraph extraction surcharge = +1 credit when `paragraph_extraction` is true. - Plot2Table credits = 1 per chart processed when `plot2table` > 0. 

        :param url: URL to scrape (required)
        :type url: str
        :param query: Optional hint to guide extraction focus for this URL
        :type query: str
        :param paragraph_extraction: Extract statistics from paragraphs and convert to structured series
        :type paragraph_extraction: bool
        :param plot2table: Number of plot images to analyze and convert into raw datapoints
        :type plot2table: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._scrape_get_serialize(
            url=url,
            query=query,
            paragraph_extraction=paragraph_extraction,
            plot2table=plot2table,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ScrapeGet200Response",
            '400': "QueryNlGet400Response",
            '401': "QueryNlGet400Response",
            '429': "QueryNlGet400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def scrape_get_with_http_info(
        self,
        url: Annotated[StrictStr, Field(description="URL to scrape")],
        query: Annotated[Optional[StrictStr], Field(description="Optional hint to guide extraction focus for this URL")] = None,
        paragraph_extraction: Annotated[Optional[StrictBool], Field(description="Extract statistics from paragraphs and convert to structured series")] = None,
        plot2table: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of plot images to analyze and convert into raw datapoints")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ScrapeGet200Response]:
        """Structured Web Scrape

        We search the public web for the most relevant sources to your query, extract structured data, and return curated series.  How it works: - We always extract tabular/JSON-like data when available. - If `paragraph_extraction` is true, we scan prose paragraphs to identify statistics and convert them into series (e.g., \"In 2000, there were 5,000 Swedes in Norway; in 2020, 50,000\" → year/value pairs). - If `plot2table` > 0, we analyze images of plots and extract their underlying datapoints.  Credits: - 1 Scrape credit per request. - Paragraph extraction surcharge = +1 credit when `paragraph_extraction` is true. - Plot2Table credits = 1 per chart processed when `plot2table` > 0. 

        :param url: URL to scrape (required)
        :type url: str
        :param query: Optional hint to guide extraction focus for this URL
        :type query: str
        :param paragraph_extraction: Extract statistics from paragraphs and convert to structured series
        :type paragraph_extraction: bool
        :param plot2table: Number of plot images to analyze and convert into raw datapoints
        :type plot2table: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._scrape_get_serialize(
            url=url,
            query=query,
            paragraph_extraction=paragraph_extraction,
            plot2table=plot2table,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ScrapeGet200Response",
            '400': "QueryNlGet400Response",
            '401': "QueryNlGet400Response",
            '429': "QueryNlGet400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def scrape_get_without_preload_content(
        self,
        url: Annotated[StrictStr, Field(description="URL to scrape")],
        query: Annotated[Optional[StrictStr], Field(description="Optional hint to guide extraction focus for this URL")] = None,
        paragraph_extraction: Annotated[Optional[StrictBool], Field(description="Extract statistics from paragraphs and convert to structured series")] = None,
        plot2table: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of plot images to analyze and convert into raw datapoints")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Structured Web Scrape

        We search the public web for the most relevant sources to your query, extract structured data, and return curated series.  How it works: - We always extract tabular/JSON-like data when available. - If `paragraph_extraction` is true, we scan prose paragraphs to identify statistics and convert them into series (e.g., \"In 2000, there were 5,000 Swedes in Norway; in 2020, 50,000\" → year/value pairs). - If `plot2table` > 0, we analyze images of plots and extract their underlying datapoints.  Credits: - 1 Scrape credit per request. - Paragraph extraction surcharge = +1 credit when `paragraph_extraction` is true. - Plot2Table credits = 1 per chart processed when `plot2table` > 0. 

        :param url: URL to scrape (required)
        :type url: str
        :param query: Optional hint to guide extraction focus for this URL
        :type query: str
        :param paragraph_extraction: Extract statistics from paragraphs and convert to structured series
        :type paragraph_extraction: bool
        :param plot2table: Number of plot images to analyze and convert into raw datapoints
        :type plot2table: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._scrape_get_serialize(
            url=url,
            query=query,
            paragraph_extraction=paragraph_extraction,
            plot2table=plot2table,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ScrapeGet200Response",
            '400': "QueryNlGet400Response",
            '401': "QueryNlGet400Response",
            '429': "QueryNlGet400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _scrape_get_serialize(
        self,
        url,
        query,
        paragraph_extraction,
        plot2table,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if url is not None:
            
            _query_params.append(('url', url))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        if paragraph_extraction is not None:
            
            _query_params.append(('paragraph_extraction', paragraph_extraction))
            
        if plot2table is not None:
            
            _query_params.append(('plot2table', plot2table))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/scrape',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


