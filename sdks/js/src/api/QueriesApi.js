/**
 * qoery's API
 * Every number on the internet, queryable. Instant access to millions of trusted statistics through a single natural language query or API call.  # Installation  ### Python SDK  Install from PyPI:  ```bash pip install qoery ```  PyPI: [qoery](https://pypi.org/project/qoery/)  ### JavaScript SDK  Install from npm:  ```bash npm install qoery ```  npm: [qoery](https://www.npmjs.com/package/qoery) 
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: samuel.tinnerholm@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import QueryNlGet200Response from '../model/QueryNlGet200Response';
import QueryNlGet400Response from '../model/QueryNlGet400Response';

/**
* Queries service.
* @module api/QueriesApi
* @version 0.4.0
*/
export default class QueriesApi {

    /**
    * Constructs a new QueriesApi. 
    * @alias module:api/QueriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the queryNlGet operation.
     * @callback module:api/QueriesApi~queryNlGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryNlGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Natural Language Query
     * We search the public web for the most relevant sources to your query, extract structured data, and return curated series.  How it works: - We query the web and fetch the top `num_results` relevant pages. - We always extract tabular/JSON-like data when available. - If `paragraph_extraction` is true, we scan prose paragraphs to identify statistics and convert them into series (e.g., \"In 2000, there were 5,000 Swedes in Norway; in 2020, 50,000\" â†’ year/value pairs). - If `plot2table` > 0, we analyze images of plots and extract their underlying datapoints.  Credits: - Base credits = ceil(num_results / 10), minimum 1. - Paragraph extraction surcharge = +1 credit when `paragraph_extraction` is true. - Plot2Table credits = 1 per chart processed when `plot2table` > 0. 
     * @param {String} query Natural language query
     * @param {Object} opts Optional parameters
     * @param {Number} [numResults = 10)] Number of top relevant pages to fetch and process
     * @param {Boolean} [paragraphExtraction = false)] Extract statistics from paragraph text and convert to structured series (year/value pairs)
     * @param {Number} [plot2table = 0)] Number of plot images to analyze and convert into raw datapoints
     * @param {module:api/QueriesApi~queryNlGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryNlGet200Response}
     */
    queryNlGet(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling queryNlGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'num_results': opts['numResults'],
        'paragraph_extraction': opts['paragraphExtraction'],
        'plot2table': opts['plot2table']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueryNlGet200Response;
      return this.apiClient.callApi(
        '/query/nl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
