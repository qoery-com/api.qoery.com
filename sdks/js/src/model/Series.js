/**
 * qoery's API
 * Every number on the internet, queryable. Instant access to millions of trusted statistics through a single natural language query or API call. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QueryNlPost200ResponseSeriesInnerObservationsInner from './QueryNlPost200ResponseSeriesInnerObservationsInner';

/**
 * The Series model module.
 * @module model/Series
 * @version 0.1.0
 */
class Series {
    /**
     * Constructs a new <code>Series</code>.
     * @alias module:model/Series
     * @param name {String} human-friendly name for the series
     * @param observations {Array.<module:model/QueryNlPost200ResponseSeriesInnerObservationsInner>} 
     */
    constructor(name, observations) { 
        
        Series.initialize(this, name, observations);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, observations) { 
        obj['name'] = name;
        obj['observations'] = observations;
    }

    /**
     * Constructs a <code>Series</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Series} obj Optional instance to populate.
     * @return {module:model/Series} The populated <code>Series</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Series();

            if (data.hasOwnProperty('series_id')) {
                obj['series_id'] = ApiClient.convertToType(data['series_id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('observations')) {
                obj['observations'] = ApiClient.convertToType(data['observations'], [QueryNlPost200ResponseSeriesInnerObservationsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Series</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Series</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Series.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['series_id'] && !(typeof data['series_id'] === 'string' || data['series_id'] instanceof String)) {
            throw new Error("Expected the field `series_id` to be a primitive type in the JSON string but got " + data['series_id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }
        if (data['observations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['observations'])) {
                throw new Error("Expected the field `observations` to be an array in the JSON data but got " + data['observations']);
            }
            // validate the optional field `observations` (array)
            for (const item of data['observations']) {
                QueryNlPost200ResponseSeriesInnerObservationsInner.validateJSON(item);
            };
        }

        return true;
    }


}

Series.RequiredProperties = ["name", "observations"];

/**
 * short id for the series (optional but recommended)
 * @member {String} series_id
 */
Series.prototype['series_id'] = undefined;

/**
 * human-friendly name for the series
 * @member {String} name
 */
Series.prototype['name'] = undefined;

/**
 * unit of measurement (optional)
 * @member {String} unit
 */
Series.prototype['unit'] = undefined;

/**
 * @member {Array.<module:model/QueryNlPost200ResponseSeriesInnerObservationsInner>} observations
 */
Series.prototype['observations'] = undefined;






export default Series;

