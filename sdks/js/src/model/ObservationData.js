/**
 * qoery's API
 * Every number on the internet, queryable. Instant access to millions of trusted statistics through a single natural language query or API call. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: samuel.tinnerholm@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ObservationData model module.
 * @module model/ObservationData
 * @version 0.1.0
 */
class ObservationData {
    /**
     * Constructs a new <code>ObservationData</code>.
     * A single observation with full metadata (flat structure)
     * @alias module:model/ObservationData
     * @param ts {Date} Timestamp of the observation
     * @param value {String} Value of the observation (returned as string)
     */
    constructor(ts, value) { 
        
        ObservationData.initialize(this, ts, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ts, value) { 
        obj['ts'] = ts;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>ObservationData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObservationData} obj Optional instance to populate.
     * @return {module:model/ObservationData} The populated <code>ObservationData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObservationData();

            if (data.hasOwnProperty('ts')) {
                obj['ts'] = ApiClient.convertToType(data['ts'], 'Date');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('entity_name')) {
                obj['entity_name'] = ApiClient.convertToType(data['entity_name'], 'String');
            }
            if (data.hasOwnProperty('entity_id')) {
                obj['entity_id'] = ApiClient.convertToType(data['entity_id'], 'String');
            }
            if (data.hasOwnProperty('metric_name')) {
                obj['metric_name'] = ApiClient.convertToType(data['metric_name'], 'String');
            }
            if (data.hasOwnProperty('metric_id')) {
                obj['metric_id'] = ApiClient.convertToType(data['metric_id'], 'String');
            }
            if (data.hasOwnProperty('unit_name')) {
                obj['unit_name'] = ApiClient.convertToType(data['unit_name'], 'String');
            }
            if (data.hasOwnProperty('unit_id')) {
                obj['unit_id'] = ApiClient.convertToType(data['unit_id'], 'String');
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], 'String');
            }
            if (data.hasOwnProperty('series_description')) {
                obj['series_description'] = ApiClient.convertToType(data['series_description'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': Object});
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('series_id')) {
                obj['series_id'] = ApiClient.convertToType(data['series_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ObservationData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ObservationData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ObservationData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }
        // ensure the json data is a string
        if (data['entity_name'] && !(typeof data['entity_name'] === 'string' || data['entity_name'] instanceof String)) {
            throw new Error("Expected the field `entity_name` to be a primitive type in the JSON string but got " + data['entity_name']);
        }
        // ensure the json data is a string
        if (data['entity_id'] && !(typeof data['entity_id'] === 'string' || data['entity_id'] instanceof String)) {
            throw new Error("Expected the field `entity_id` to be a primitive type in the JSON string but got " + data['entity_id']);
        }
        // ensure the json data is a string
        if (data['metric_name'] && !(typeof data['metric_name'] === 'string' || data['metric_name'] instanceof String)) {
            throw new Error("Expected the field `metric_name` to be a primitive type in the JSON string but got " + data['metric_name']);
        }
        // ensure the json data is a string
        if (data['metric_id'] && !(typeof data['metric_id'] === 'string' || data['metric_id'] instanceof String)) {
            throw new Error("Expected the field `metric_id` to be a primitive type in the JSON string but got " + data['metric_id']);
        }
        // ensure the json data is a string
        if (data['unit_name'] && !(typeof data['unit_name'] === 'string' || data['unit_name'] instanceof String)) {
            throw new Error("Expected the field `unit_name` to be a primitive type in the JSON string but got " + data['unit_name']);
        }
        // ensure the json data is a string
        if (data['unit_id'] && !(typeof data['unit_id'] === 'string' || data['unit_id'] instanceof String)) {
            throw new Error("Expected the field `unit_id` to be a primitive type in the JSON string but got " + data['unit_id']);
        }
        // ensure the json data is a string
        if (data['frequency'] && !(typeof data['frequency'] === 'string' || data['frequency'] instanceof String)) {
            throw new Error("Expected the field `frequency` to be a primitive type in the JSON string but got " + data['frequency']);
        }
        // ensure the json data is a string
        if (data['series_description'] && !(typeof data['series_description'] === 'string' || data['series_description'] instanceof String)) {
            throw new Error("Expected the field `series_description` to be a primitive type in the JSON string but got " + data['series_description']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['series_id'] && !(typeof data['series_id'] === 'string' || data['series_id'] instanceof String)) {
            throw new Error("Expected the field `series_id` to be a primitive type in the JSON string but got " + data['series_id']);
        }

        return true;
    }


}

ObservationData.RequiredProperties = ["ts", "value"];

/**
 * Timestamp of the observation
 * @member {Date} ts
 */
ObservationData.prototype['ts'] = undefined;

/**
 * Value of the observation (returned as string)
 * @member {String} value
 */
ObservationData.prototype['value'] = undefined;

/**
 * Human-readable name of the entity
 * @member {String} entity_name
 */
ObservationData.prototype['entity_name'] = undefined;

/**
 * ID of the entity
 * @member {String} entity_id
 */
ObservationData.prototype['entity_id'] = undefined;

/**
 * Human-readable name of the metric
 * @member {String} metric_name
 */
ObservationData.prototype['metric_name'] = undefined;

/**
 * ID of the metric
 * @member {String} metric_id
 */
ObservationData.prototype['metric_id'] = undefined;

/**
 * Human-readable name of the unit
 * @member {String} unit_name
 */
ObservationData.prototype['unit_name'] = undefined;

/**
 * ID of the unit
 * @member {String} unit_id
 */
ObservationData.prototype['unit_id'] = undefined;

/**
 * Frequency of the time series (e.g., monthly, annual)
 * @member {String} frequency
 */
ObservationData.prototype['frequency'] = undefined;

/**
 * Description of the series
 * @member {String} series_description
 */
ObservationData.prototype['series_description'] = undefined;

/**
 * Additional labels and metadata
 * @member {Object.<String, Object>} labels
 */
ObservationData.prototype['labels'] = undefined;

/**
 * Source URL for the data
 * @member {String} source
 */
ObservationData.prototype['source'] = undefined;

/**
 * ID of the series
 * @member {String} series_id
 */
ObservationData.prototype['series_id'] = undefined;






export default ObservationData;

