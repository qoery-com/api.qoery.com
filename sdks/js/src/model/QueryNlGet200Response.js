/**
 * qoery's API
 * Every number on the internet, queryable. Instant access to millions of trusted statistics through a single natural language query or API call.  # Installation  ### Python SDK  Install from PyPI:  ```bash pip install qoery ```  PyPI: [qoery](https://pypi.org/project/qoery/)  ### JavaScript SDK  Install from npm:  ```bash npm install qoery ```  npm: [qoery](https://www.npmjs.com/package/qoery) 
 *
 * The version of the OpenAPI document: 0.3.0
 * Contact: samuel.tinnerholm@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QueryNlGet200ResponseMeta from './QueryNlGet200ResponseMeta';
import QueryNlGet200ResponseSeriesInner from './QueryNlGet200ResponseSeriesInner';

/**
 * The QueryNlGet200Response model module.
 * @module model/QueryNlGet200Response
 * @version 0.3.0
 */
class QueryNlGet200Response {
    /**
     * Constructs a new <code>QueryNlGet200Response</code>.
     * Response from natural language query endpoint
     * @alias module:model/QueryNlGet200Response
     * @param series {Array.<module:model/QueryNlGet200ResponseSeriesInner>} Array of series, each with its observations
     * @param meta {module:model/QueryNlGet200ResponseMeta} 
     */
    constructor(series, meta) { 
        
        QueryNlGet200Response.initialize(this, series, meta);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, series, meta) { 
        obj['series'] = series;
        obj['meta'] = meta;
    }

    /**
     * Constructs a <code>QueryNlGet200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryNlGet200Response} obj Optional instance to populate.
     * @return {module:model/QueryNlGet200Response} The populated <code>QueryNlGet200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryNlGet200Response();

            if (data.hasOwnProperty('series')) {
                obj['series'] = ApiClient.convertToType(data['series'], [QueryNlGet200ResponseSeriesInner]);
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = QueryNlGet200ResponseMeta.constructFromObject(data['meta']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryNlGet200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryNlGet200Response</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QueryNlGet200Response.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['series']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['series'])) {
                throw new Error("Expected the field `series` to be an array in the JSON data but got " + data['series']);
            }
            // validate the optional field `series` (array)
            for (const item of data['series']) {
                QueryNlGet200ResponseSeriesInner.validateJSON(item);
            };
        }
        // validate the optional field `meta`
        if (data['meta']) { // data not null
          QueryNlGet200ResponseMeta.validateJSON(data['meta']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}

QueryNlGet200Response.RequiredProperties = ["series", "meta"];

/**
 * Array of series, each with its observations
 * @member {Array.<module:model/QueryNlGet200ResponseSeriesInner>} series
 */
QueryNlGet200Response.prototype['series'] = undefined;

/**
 * @member {module:model/QueryNlGet200ResponseMeta} meta
 */
QueryNlGet200Response.prototype['meta'] = undefined;

/**
 * Natural language description of the query result
 * @member {String} description
 */
QueryNlGet200Response.prototype['description'] = undefined;






export default QueryNlGet200Response;

