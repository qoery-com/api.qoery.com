/**
 * qoery's API
 * Every number on the internet, queryable. Instant access to millions of trusted statistics through a single natural language query or API call.  # Installation  ### Python SDK  Install from PyPI:  ```bash pip install qoery ```  PyPI: [qoery](https://pypi.org/project/qoery/)  ### JavaScript SDK  Install from npm:  ```bash npm install qoery ```  npm: [qoery](https://www.npmjs.com/package/qoery) 
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: samuel.tinnerholm@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NLQueryRequest model module.
 * @module model/NLQueryRequest
 * @version 0.4.0
 */
class NLQueryRequest {
    /**
     * Constructs a new <code>NLQueryRequest</code>.
     * @alias module:model/NLQueryRequest
     * @param query {String} Natural language query
     */
    constructor(query) { 
        
        NLQueryRequest.initialize(this, query);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, query) { 
        obj['query'] = query;
        obj['num_results'] = 10;
        obj['paragraph_extraction'] = false;
        obj['plot2table'] = 0;
    }

    /**
     * Constructs a <code>NLQueryRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NLQueryRequest} obj Optional instance to populate.
     * @return {module:model/NLQueryRequest} The populated <code>NLQueryRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NLQueryRequest();

            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('num_results')) {
                obj['num_results'] = ApiClient.convertToType(data['num_results'], 'Number');
            }
            if (data.hasOwnProperty('paragraph_extraction')) {
                obj['paragraph_extraction'] = ApiClient.convertToType(data['paragraph_extraction'], 'Boolean');
            }
            if (data.hasOwnProperty('plot2table')) {
                obj['plot2table'] = ApiClient.convertToType(data['plot2table'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NLQueryRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NLQueryRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NLQueryRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }

        return true;
    }


}

NLQueryRequest.RequiredProperties = ["query"];

/**
 * Natural language query
 * @member {String} query
 */
NLQueryRequest.prototype['query'] = undefined;

/**
 * Number of search results to process
 * @member {Number} num_results
 * @default 10
 */
NLQueryRequest.prototype['num_results'] = 10;

/**
 * Enable paragraph-based time-series extraction
 * @member {Boolean} paragraph_extraction
 * @default false
 */
NLQueryRequest.prototype['paragraph_extraction'] = false;

/**
 * Number of charts/images to process with plot2table
 * @member {Number} plot2table
 * @default 0
 */
NLQueryRequest.prototype['plot2table'] = 0;






export default NLQueryRequest;

