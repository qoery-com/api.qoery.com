/**
 * qoery's API
 * Every number on the internet, queryable. Instant access to millions of trusted statistics through a single natural language query or API call. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: samuel.tinnerholm@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UsageGet200Response model module.
 * @module model/UsageGet200Response
 * @version 0.1.0
 */
class UsageGet200Response {
    /**
     * Constructs a new <code>UsageGet200Response</code>.
     * @alias module:model/UsageGet200Response
     * @param queriesUsed {Number} Number of queries used in current period
     * @param queriesLimit {Number} Maximum queries allowed in current period
     * @param periodStart {Date} 
     * @param periodEnd {Date} 
     * @param concurrentRequests {Number} Current number of concurrent requests
     * @param maxConcurrent {Number} Maximum concurrent requests allowed
     * @param tokensIn {Number} Total input tokens consumed in current period
     * @param tokensOut {Number} Total output tokens consumed in current period
     * @param errors {Number} Total number of errors in current period
     */
    constructor(queriesUsed, queriesLimit, periodStart, periodEnd, concurrentRequests, maxConcurrent, tokensIn, tokensOut, errors) { 
        
        UsageGet200Response.initialize(this, queriesUsed, queriesLimit, periodStart, periodEnd, concurrentRequests, maxConcurrent, tokensIn, tokensOut, errors);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, queriesUsed, queriesLimit, periodStart, periodEnd, concurrentRequests, maxConcurrent, tokensIn, tokensOut, errors) { 
        obj['queries_used'] = queriesUsed;
        obj['queries_limit'] = queriesLimit;
        obj['period_start'] = periodStart;
        obj['period_end'] = periodEnd;
        obj['concurrent_requests'] = concurrentRequests;
        obj['max_concurrent'] = maxConcurrent;
        obj['tokens_in'] = tokensIn;
        obj['tokens_out'] = tokensOut;
        obj['errors'] = errors;
    }

    /**
     * Constructs a <code>UsageGet200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UsageGet200Response} obj Optional instance to populate.
     * @return {module:model/UsageGet200Response} The populated <code>UsageGet200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UsageGet200Response();

            if (data.hasOwnProperty('queries_used')) {
                obj['queries_used'] = ApiClient.convertToType(data['queries_used'], 'Number');
            }
            if (data.hasOwnProperty('queries_limit')) {
                obj['queries_limit'] = ApiClient.convertToType(data['queries_limit'], 'Number');
            }
            if (data.hasOwnProperty('period_start')) {
                obj['period_start'] = ApiClient.convertToType(data['period_start'], 'Date');
            }
            if (data.hasOwnProperty('period_end')) {
                obj['period_end'] = ApiClient.convertToType(data['period_end'], 'Date');
            }
            if (data.hasOwnProperty('concurrent_requests')) {
                obj['concurrent_requests'] = ApiClient.convertToType(data['concurrent_requests'], 'Number');
            }
            if (data.hasOwnProperty('max_concurrent')) {
                obj['max_concurrent'] = ApiClient.convertToType(data['max_concurrent'], 'Number');
            }
            if (data.hasOwnProperty('tokens_in')) {
                obj['tokens_in'] = ApiClient.convertToType(data['tokens_in'], 'Number');
            }
            if (data.hasOwnProperty('tokens_out')) {
                obj['tokens_out'] = ApiClient.convertToType(data['tokens_out'], 'Number');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UsageGet200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UsageGet200Response</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UsageGet200Response.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

UsageGet200Response.RequiredProperties = ["queries_used", "queries_limit", "period_start", "period_end", "concurrent_requests", "max_concurrent", "tokens_in", "tokens_out", "errors"];

/**
 * Number of queries used in current period
 * @member {Number} queries_used
 */
UsageGet200Response.prototype['queries_used'] = undefined;

/**
 * Maximum queries allowed in current period
 * @member {Number} queries_limit
 */
UsageGet200Response.prototype['queries_limit'] = undefined;

/**
 * @member {Date} period_start
 */
UsageGet200Response.prototype['period_start'] = undefined;

/**
 * @member {Date} period_end
 */
UsageGet200Response.prototype['period_end'] = undefined;

/**
 * Current number of concurrent requests
 * @member {Number} concurrent_requests
 */
UsageGet200Response.prototype['concurrent_requests'] = undefined;

/**
 * Maximum concurrent requests allowed
 * @member {Number} max_concurrent
 */
UsageGet200Response.prototype['max_concurrent'] = undefined;

/**
 * Total input tokens consumed in current period
 * @member {Number} tokens_in
 */
UsageGet200Response.prototype['tokens_in'] = undefined;

/**
 * Total output tokens consumed in current period
 * @member {Number} tokens_out
 */
UsageGet200Response.prototype['tokens_out'] = undefined;

/**
 * Total number of errors in current period
 * @member {Number} errors
 */
UsageGet200Response.prototype['errors'] = undefined;






export default UsageGet200Response;

