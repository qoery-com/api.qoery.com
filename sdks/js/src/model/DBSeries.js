/**
 * qoery's API
 * Every number on the internet, queryable. Instant access to millions of trusted statistics through a single natural language query or API call. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: samuel.tinnerholm@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DBSeries model module.
 * @module model/DBSeries
 * @version 0.1.0
 */
class DBSeries {
    /**
     * Constructs a new <code>DBSeries</code>.
     * Database-structured series returned from cached scrape results
     * @alias module:model/DBSeries
     * @param id {Number} 
     * @param entityId {Number} 
     * @param metricId {Number} 
     */
    constructor(id, entityId, metricId) { 
        
        DBSeries.initialize(this, id, entityId, metricId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, entityId, metricId) { 
        obj['id'] = id;
        obj['entity_id'] = entityId;
        obj['metric_id'] = metricId;
    }

    /**
     * Constructs a <code>DBSeries</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DBSeries} obj Optional instance to populate.
     * @return {module:model/DBSeries} The populated <code>DBSeries</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DBSeries();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('entity_id')) {
                obj['entity_id'] = ApiClient.convertToType(data['entity_id'], 'Number');
            }
            if (data.hasOwnProperty('metric_id')) {
                obj['metric_id'] = ApiClient.convertToType(data['metric_id'], 'Number');
            }
            if (data.hasOwnProperty('unit_id')) {
                obj['unit_id'] = ApiClient.convertToType(data['unit_id'], 'Number');
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': Object});
            }
            if (data.hasOwnProperty('observations_count')) {
                obj['observations_count'] = ApiClient.convertToType(data['observations_count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DBSeries</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DBSeries</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DBSeries.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['frequency'] && !(typeof data['frequency'] === 'string' || data['frequency'] instanceof String)) {
            throw new Error("Expected the field `frequency` to be a primitive type in the JSON string but got " + data['frequency']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}

DBSeries.RequiredProperties = ["id", "entity_id", "metric_id"];

/**
 * @member {Number} id
 */
DBSeries.prototype['id'] = undefined;

/**
 * @member {Number} entity_id
 */
DBSeries.prototype['entity_id'] = undefined;

/**
 * @member {Number} metric_id
 */
DBSeries.prototype['metric_id'] = undefined;

/**
 * @member {Number} unit_id
 */
DBSeries.prototype['unit_id'] = undefined;

/**
 * @member {String} frequency
 */
DBSeries.prototype['frequency'] = undefined;

/**
 * @member {String} description
 */
DBSeries.prototype['description'] = undefined;

/**
 * @member {Object.<String, Object>} labels
 */
DBSeries.prototype['labels'] = undefined;

/**
 * @member {Number} observations_count
 */
DBSeries.prototype['observations_count'] = undefined;






export default DBSeries;

