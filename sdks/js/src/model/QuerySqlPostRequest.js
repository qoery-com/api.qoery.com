/**
 * qoery's API
 * Every number on the internet, queryable. Instant access to millions of trusted statistics through a single natural language query or API call. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: samuel.tinnerholm@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The QuerySqlPostRequest model module.
 * @module model/QuerySqlPostRequest
 * @version 0.1.0
 */
class QuerySqlPostRequest {
    /**
     * Constructs a new <code>QuerySqlPostRequest</code>.
     * @alias module:model/QuerySqlPostRequest
     */
    constructor() { 
        
        QuerySqlPostRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QuerySqlPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuerySqlPostRequest} obj Optional instance to populate.
     * @return {module:model/QuerySqlPostRequest} The populated <code>QuerySqlPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuerySqlPostRequest();

            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('sql_query')) {
                obj['sql_query'] = ApiClient.convertToType(data['sql_query'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuerySqlPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuerySqlPostRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // ensure the json data is a string
        if (data['sql_query'] && !(typeof data['sql_query'] === 'string' || data['sql_query'] instanceof String)) {
            throw new Error("Expected the field `sql_query` to be a primitive type in the JSON string but got " + data['sql_query']);
        }

        return true;
    }


}



/**
 * SQL query to execute (primary field name)
 * @member {String} query
 */
QuerySqlPostRequest.prototype['query'] = undefined;

/**
 * SQL query to execute (alternative/legacy field name)
 * @member {String} sql_query
 */
QuerySqlPostRequest.prototype['sql_query'] = undefined;






export default QuerySqlPostRequest;

